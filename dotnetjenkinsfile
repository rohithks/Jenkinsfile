pipeline {
 agent any
 environment {
  dotnet = '/usr/bin/dotnet'
 }
 stages {
  stage('Checkout') {
   steps {
    //git credentialsId: 'userId', url: 'https://github.com/NeelBhatt/SampleCliApp', branch: 'master'
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '21dcef66-4390-4b26-8345-bdce1adc6a5d', url: 'https://github.com/rohithks/dotnet-project.git']]])

   }
  }
  stage('Restore PACKAGES') {
   steps {
    sh 'dotnet restore'
   }
  }
  stage('Clean') {
   steps {
    sh 'dotnet clean'
   }
  }
  stage('Build') {
   steps {
    sh 'dotnet build '
   }
  }
  stage(' Junit Test') {
        steps {
            sh 'echo testing'
          //sh 'npm run test-ci'
          //junit 'test-results.xml'
          //junit allowEmptyResults: true, testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '/var/lib/jenkins/workspace/Dotnet_Project/*.xml'
          
    }
  } 
 stage('Jmeter Test') {
   steps {
      sh  "echo testing.."  
   }
  }
    stage('Sonarqube') {
   steps {
       sh  "echo Sonarqube Analysis..." 
       //codesonar conditions: [], credentialId: 'd4a26375-5cf5-4af8-96d1-582f96efb1ee', hubAddress: 'http://104.41.141.82:9000', projectName: 'Dotnet_Project', protocol: 'http'

   }
  }
  stage('Pack') {
   steps {
      sh  "echo packing"  
    //sh 'dotnet pack --no-build --output nupkgs'
   }
  }
 // stage('Publish') {
 //  steps {
 //   bat "dotnet nuget push **\\nupkgs\\*.nupkg -k yourApiKey -s            http://myserver/artifactory/api/nuget/nuget-internal-stable/com/sample"
  // }
  //}
 }
}
