pipeline {
 agent any
 environment {
  dotnet = '/usr/bin/dotnet'
 }
 stages {
  stage('Checkout') {
   steps {
    //git credentialsId: 'userId', url: 'https://github.com/NeelBhatt/SampleCliApp', branch: 'master'
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '21dcef66-4390-4b26-8345-bdce1adc6a5d', url: 'https://github.com/rohithks/dotnet-project.git']]])

   }
  }
  stage('Restore PACKAGES') {
   steps { 
       sh "pwd"
       sh "dotnet restore" 
   }
  }
  stage('Clean') {
   steps {
       sh "dotnet clean"
   }
  }
  stage('Build') {
   steps {
       sh  "dotnet build " 
   }
  }
  stage ('unit test') {
   steps {    
       // returnStatus: true here will ensure the build stays yellow
        // when test cases are failing
        sh (script: './gradlew test', returnStatus: true)
        step([$class: 'JUnitResultArchiver',
             testResults: '**/build/test-results/test/TEST-*.xml'])

  if (currentBuild.result == null) {
        // if unit tests have failed currentBuild will be 'UNSTABLE'
        // and we should not bother to run integration tests
           stage "integration test"
           sh (script: './gradlew integTest', returnStatus: true)
           step([$class: 'JUnitResultArchiver',
           testResults: '**/build/test-results/integTest/TEST-*.xml'])
    }
  }  
}
  
  stage('Sonarqube') {
   steps {
      sh  "echo code analysis.."  
   }
  }
 // stage('Publish') {
 //  steps {
 //   sh "dotnet nuget push **\\nupkgs\\*.nupkg -k yourApiKey -s            http://myserver/artifactory/api/nuget/nuget-internal-stable/com/sample"
 //  }
 // }
    stage('Pack') {
   steps {
     sh  "dotnet pack --no-build --output nupkgs"   
   }
  }
    stage('Junit') {
   steps {
       sh  "echo unit testing..." 
   }
  }
    stage('JMeter') {
   steps {
       sh  "echo Perfomance testing..." 
   }
  }
      stage('Fotify') {
   steps {
       sh  "echo code security checking..." 
   }
  }
 }
}
